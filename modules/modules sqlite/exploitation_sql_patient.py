import profil as p
import sqlite3
import lire_sql as lsql

#Comme amélioration : utiliser des requetes sql, utiliser p.MOIS pour 
#rechercher directement genre decembre et aussi permettre de rechercher avec 
#plusieurs strings type 5 ou 6 pour trouver un patient précisément type 
#on fait une recherche, on a une longue liste, re cherche dedans, 
#tia compris jusqu'a ce qu'il y en ai plus que 1
def recherche_patient(string):
    """Cette fonction permet de prendre une chaine de caract en parametre, et retourne parmis tous les 
    patients existants ceux avec une chaine matchante, c'est pour voir si quelqu'un est enregistre et
    avoir acces a ses donnees"""
    recherche = []
    connection = sqlite3.connect("donnees.db")
    cursor = connection.cursor()
    req = cursor.execute('SELECT * FROM patients')
    for row in req.fetchall():
        l = row[7].split()
        for elt in row :
            if elt == string :
                recherche.append(lsql.lire_sql_patient(row))
        for elt in l :
            if elt == string :
                recherche.append(lsql.lire_sql_patient(row))
    connection.close()
    return recherche
#Je me demande si j'aurais pas ou faire cette question en SQL aussi, c'est ptet meme mieux optimisé


def patient_existe(mail):
    """cette fonction prends un mail, regarde si il existe un patient enregistre
    avec ce mail, si oui renvoie True, si non renvoie False"""
    connection = sqlite3.connect("donnees.db")
    cursor = connection.cursor()
    
    sql_mail = (str(mail),)
    cursor.execute('SELECT * FROM patients WHERE mail = ?', sql_mail)
    patient_qui_existe_deja = cursor.fetchone()
    connection.close()
    return patient_qui_existe_deja != None
#Ce qui est formidable sous mes yeux ébahis c'est que fetchall sort une liste
#De tuples de toutes les requetes récupérées par le curseur, fetchmany tu peux
#justement spécifier combien de tuples tu veux et fetchone ça t'en donnes qu'un
#Ce qui est ultra pratique à utiliser avec un SORT BY parce que t'as le ou les 
#premiers d'un groupe par exemple 

def creer_patient(prenom, nom, jour, mois, annee, mail, telephone, adresse):
    """Cette fonction cree un nouveau patient et rentre ses elements dans la base de donee, 
    elle retournera une erreur si le patient s'est deja enregistre avec ce mail"""
    
    if patient_existe(mail) :
        return "Un patient avec le meme mail existe deja sur notre application doctobelix"
    
    else :
        connection = sqlite3.connect("donnees.db")
        cursor = connection.cursor()
        nouveau_patient = (prenom, nom, jour, mois, annee, mail, telephone, adresse)
        cursor.execute('INSERT INTO patients VALUES(?,?,?,?,?,?,?,?)', nouveau_patient)
        connection.commit()
        connection.close()
        return "le patient a bien été créé"


def creer_mdp_patient(mail, mdp):
    """cree les donnes du patient dans la base de donnee id"""
    if lsql.mdp_existe(mail) :
        return "Un patient avec le meme mail existe deja sur notre application doctobelix"
    else:
        connection = sqlite3.connect("donnees.db")
        cursor = connection.cursor()
        nouveau_patient = (mail, mdp, "p")
        cursor.execute('INSERT INTO identifiants VALUES(?,?,?)', nouveau_patient)
        connection.commit()
        connection.close()
        return "le patient a bien été créé"
    

def supprimer_patient(mail):
    """ce programme permet de supprimer un patient de la base de donnee en supprimant ses 
    donnees egalement mais ne supprime pas son mail et mdp de la bdd identifiants"""
    
    if patient_existe(mail) :
        connection = sqlite3.connect("donnees.db")
        cursor = connection.cursor()
        sql_mail = (str(mail),) 
        cursor.execute('DELETE FROM patients WHERE mail=?', sql_mail)
        connection.commit()
        connection.close()
        return "Le patient ainsi que ses donnees ont ete supprimees"
    else :
        return "le patient que vous essayez de supprimer n'existe pas encore sur doctobélix"
#C'est tellement simple et intuitif je kiffe ce language l'inventeur du SQL 
#mérite joie et bonheur tout au long de sa vie


def supprimer_mdp_patient(mail):
    """supprimme les donnees du patient en id"""
    if lsql.mdp_existe(mail) :
        connection = sqlite3.connect("donnees.db")
        cursor = connection.cursor()
        sql_mail = (str(mail),) 
        cursor.execute('DELETE FROM identifiants WHERE mail=?', sql_mail)
        connection.commit()
        connection.close()
        return "Le patient ainsi que son mdp a ete supprimee"
    else :
        return "le patient que vous essayez de supprimer n'existe pas encore sur doctobélix"
    
def supprimer_un_patient_de_doctobelix(mail):
    """cette fonction supprime les donnees d'un patient en id et en donnees 
    personnelles, le patient est donc desinscrit"""
    if lsql.mdp_existe(mail) and patient_existe(mail) :
        supprimer_mdp_patient(mail)
        supprimer_patient(mail)
    else :
        return"le patient que vous cherchez a supprimer n'existe pas sur doctobelix"

#Pistes d'amelioration : moyen de ne changer que genre la date de naissance par
#exemple, pas oblige de tout remettre imaginez il dit non je suis ne le 17 et
#pas le 18 ben le gars qui s'en occupe va pas retaper toutes ses donnees tu vois
def modifier_patient(prenom, nom, jour, mois, annee, mail, telephone, adresse):
    """but : modifier les donnees d'un patient à partir de son mail, qui est par définition
    unique, attention ceci dit il est impossible de modifier son e-mail"""
    if patient_existe(mail) :
        supprimer_patient(mail)
        creer_patient(prenom, nom, jour, mois, annee, mail, telephone, adresse)
        return "le patient a été modifié"
    else:
        return "Le patient à modifier n'a pas été trouvé dans notre application doctobélix"
#cette fonction aussi peut-etre la faire en SQL je ne sais pas. Ici c'est
#Clairement pas optimise a mon avis


def connexion_patient_reussie(mail, mdp):
    """Cette fonction permet de voir si le mdp correspond avec le mail mis
    par l'utilisateur ou non, elle envoie True => le mail et le mdp 
    sont coherents, sinon elle envoie False"""
    connexion_reussie = False
    
    if patient_existe(mail):
        connection = sqlite3.connect("donnees.db")
        cursor = connection.cursor()
        sql_mail = (str(mail),)
        cursor.execute('SELECT mdp FROM identifiants WHERE mail = ?', sql_mail)
        if cursor.fetchone()[0] == mdp:
            connexion_reussie = True
        return connexion_reussie
    else :
        return connexion_reussie
    #La bdd rdv prends "rhumatologue" etc et tous les types de rendez vous
    #se voir avec vic pour databaser tout ca
    #objet de classe rdv avec motif, duree, debut, texte personnalise
    #faire reconnaissance de ville, genre ça te propose les medecins les plus proches si t'es un patient en faisant sort by ?
    

def inscription_patient(prenom, nom, jour, mois, annee, mail, telephone, adresse, mdp1, mdp2):
    if patient_existe(mail):
        return "Le patient existe deja sur doctobelix"
    else:
        if mdp1 == mdp2 :#demander deux fois le mot de passe, pour etre sur de pas taper le mauvais
            creer_patient(prenom, nom, jour, mois, annee, mail, telephone, adresse)
            creer_mdp_patient(mail, mdp1)
            return "le patient à bien ete cree sur doctobelix"
        else :
            return "les mots de passes ne matchent pas entre eux, creation du profil impossible"
        

if __name__ == "__main__" :
    
    """
    fin_de_recherche = recherche_patient(12)
    print(fin_de_recherche)
    """
    
    """
    r = recherche_mais_en_sql("frigiel")
    print (r)
    """
    
    """
    connection = sqlite3.connect("donnees.db")
    cursor = connection.cursor()
    req = cursor.execute('SELECT mail FROM patients')
    for row in req.fetchall():
        print(row[0])
    connection.close()
    """
    
    """
    alors_il_existe = patient_existe("superbrioche.666@alumni.enac.fr")
    print (alors_il_existe)
    """
    
    """
    print( p.MOIS )
    """
    
    """
    creer_patient("jean", "le-cam", 30, 5, 1967, "jeanbato@vg.com", "0784931574", "7 allee de la riboisiere LORIENT 54900 FRANCE")
    """
    
    """
    supprimer_patient("jeanbato@vg.com")  
    """
    
    """
    modifier_patient("jean", "le-cam", 30, 5, 1967, "jeanbato@vg.com", "0784931574", "7 allee de la forairie LORIENT 54900 FRANCE")
    """
    
    """
    print ( connexion_patient_reussie("jeanbato@vg.com", "jhvhjhh") )
    """
    
    """
    mdp_existe("jeanheudeslezizi@ouigo.fr")
    """
    
    """
    creer_mdp_patient("jeanheudeslezizi@ouigo.fr", "egrb")
    """
    
    """
    supprimer_mdp_patient("jeanheudeslezizi@ouigo.fr")
    """