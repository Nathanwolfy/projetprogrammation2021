from . import lire_sql as lsql
import sqlite3

#On remarque un parallelisme entre ce module et exploitation_sql_patient,
#mais je ne trouvais aucun moyen de reduire la quantite de code afin d'en
#faire uniquement un module, j'ai donc decide de les separers distinctement

def recherche_medecin(string):
    """Cette fonction permet de prendre une chaine de caractere en parametre, 
    et retourne parmis tous les medecins existants ceux avec une chaine 
    matchante, c'est pour voir si quelqu'un est enregistre et avoir acces a 
    ses donnees"""
    recherche = []#cette liste stocke les medecins ayant des attributs similaire a la string que la fonction prends en parametre
    connection = lsql.connection_bdd()
    cursor = connection.cursor()
    req = cursor.execute('SELECT * FROM medecins')
    for row in req.fetchall():
        l = row[5].split()
        for elt in row :
            if elt == string :
                recherche.append(lsql.lire_sql_medecin(row))
        for elt in l :
            if elt == string :
                recherche.append(lsql.lire_sql_medecin(row))
    connection.close()
    return recherche


def medecin_existe(mail):
    """cette fonction prends un mail, regarde si il existe un medecin enregistre
    avec ce mail, si oui renvoie True, si non renvoie False.
    Cette fonction regarde uniquement dans la table medecins car un medecin ne
    peux pas etre soit dans la table id soit dans la table medecins, il est
    forcement dans les deux (medecin existant) ou dans aucune(medecin pas 
    encore cree)."""
    connection = lsql.connection_bdd()
    cursor = connection.cursor()
    sql_mail = (str(mail),)
    cursor.execute('SELECT * FROM medecins WHERE mail = ?', sql_mail)
    medecin_qui_existe_deja = cursor.fetchone()
    connection.close()
    return medecin_qui_existe_deja != None


def creer_medecin(prenom, nom, travail, mail, telephone, rue, code_postal, ville):
    """cette fonction cree un nouveau medecin et rentre ses elements dans la table medecins, 
    elle retournera une erreur si le medecin s'est deja enregistre avec ce mail, ie
    s'il existe deja un medecin avec ce mail dans la table medeins, en pratique cette
    fonction est faite pour etre couplee avec creer_mdp_medecin juste dessous car 
    un medecin ne peut etre enregistre dans la base dans la table medecins avec ses donnees
    sans etre enregistre dans la table id aussi"""
    
    if medecin_existe(mail) :
        #return "Un medecin avec le meme mail existe deja sur notre application doctolibre"
        pass
    
    else :
        connection = lsql.connection_bdd()
        cursor = connection.cursor()
        nouveau_medecin = (prenom, nom, travail, mail, telephone, rue, code_postal, ville)
        cursor.execute('INSERT INTO medecins VALUES(?,?,?,?,?,?,?,?)', nouveau_medecin)
        connection.commit()
        connection.close()
        #return "le medecin a bien été créé"
    

def creer_mdp_medecin(mail, mdp):
    """cree les donnees du medecin dans la base de donnee id, a coupler avec 
    creer_medecin"""
    if lsql.mdp_existe(mail) :
        #return "Un login avec le meme mail existe deja sur notre application doctolibre"
        pass
    else:
        connection = lsql.connection_bdd()
        cursor = connection.cursor()
        nouveau_login = (mail, mdp, "d")
        cursor.execute('INSERT INTO identifiants VALUES(?,?,?)', nouveau_login)
        connection.commit()
        connection.close()
        #return "le login a bien été créé"
            

def supprimer_medecin(mail):
    """ce programme permet de supprimer un medecin de la table medecins en supprimant ses 
    donnees egalement mais ne supprime pas son mail et mdp de la bdd identifiants, 
    il faut donc egalement coupler cette fonction avec supprimer_mdp_medecin pour 
    desinscrire completement un medecin de doctolibre"""
    
    if medecin_existe(mail) :
        connection = lsql.connection_bdd()
        cursor = connection.cursor()
        sql_mail = (str(mail),) 
        cursor.execute('DELETE FROM medecins WHERE mail=?', sql_mail)
        connection.commit()
        connection.close()
        #return "Le medecin ainsi que ses donnees ont ete supprimees"
    else :
        #return "le medecin que vous essayez de supprimer n'existe pas encore sur doctolibre"
        pass


def supprimer_mdp_medecin(mail):
    """supprimme les donnees du medecin en id, a coupler avec supprimer_medecin"""
    if lsql.mdp_existe(mail) :
        connection = lsql.connection_bdd()
        cursor = connection.cursor()
        sql_mail = (str(mail),) 
        cursor.execute('DELETE FROM identifiants WHERE mail=?', sql_mail)
        connection.commit()
        connection.close()
        #return "Le medecin ainsi que son mdp a ete supprimee"
    else :
        #return "le medecin que vous essayez de supprimer n'existe pas encore sur doctolibre"
        pass


def supprimer_un_medecin_de_doctobelix(mail):
    """cette fonction supprime les donnees d'un medecin en id et sur la table
    medecins, elle le desinscrit completement de l'application en supprimant 
    au passage ses donnees personnelles.""" 
    if lsql.mdp_existe(mail) and medecin_existe(mail) :
        supprimer_mdp_medecin(mail)
        supprimer_medecin(mail)
    else :
        #return"le medecin que vous cherchez a supprimer n'existe pas sur doctolibre"
        pass
        

def modifier_medecin(prenom, nom, travail, mail, telephone, rue, code_postal, ville):
    """but : modifier les donnees d'un medecin à partir de son mail, qui est par définition
    unique, son mail represente la cle primaire dans la table medecins, attention ceci 
    dit il est impossible de modifier son e-mail (forcement)"""
    if medecin_existe(mail) :
        supprimer_medecin(mail)
        creer_medecin(prenom, nom, travail, mail, telephone, rue, code_postal, ville)
        #return "le medecin a été modifié"
    else:
        #return "Le medecin à modifier n'a pas été trouvé dans notre application doctolibre"
        pass


def connexion_medecin_reussie(mail, mdp):
    """Cette fonction permet de voir si le mdp tape correspond avec le mail mis
    par l'utilisateur ou non, elle envoie True => le mail et le mdp 
    sont coherents, sinon elle envoie False"""
    connexion_reussie = False #connexion_reussie est un booleen
    
    if medecin_existe(mail):
        connection = lsql.connection_bdd()
        cursor = connection.cursor()
        sql_mail = (str(mail),)
        cursor.execute('SELECT mdp FROM identifiants WHERE mail = ?', sql_mail)
        if cursor.fetchone()[0] == mdp:
            connexion_reussie = True
        return connexion_reussie
    else :
        return connexion_reussie

def inscription_medecin(prenom, nom, travail, mail, telephone, rue, code_postal, ville, mdp1, mdp2):
    """cette fonction cree un medecin dans la base de donnee, c'est a dire
    qu'elle consiste a ajouter ses donnees personnelles et de contact dans la 
    table medecins, elle ajoute aussi son mot de passe et son identifiant dans 
    la table id, jamais il n'existera un medecin dans la tabe medecins sans que ses
    identifiants soient inscrits dans id et inversemment"""
    if medecin_existe(mail):
        #return "Le medecin existe deja sur doctolibre"
        pass
    else:
        if mdp1 == mdp2 :#demander deux fois le mot de passe, pour etre sur de pas taper le mauvais
            creer_medecin(prenom, nom, travail, mail, telephone, rue, code_postal, str(ville.upper()))
            creer_mdp_medecin(mail, mdp1)
            #return "le medecin à bien ete cree sur doctolibre"
        else :
            #return "les mots de passes ne matchent pas entre eux, creation du profil impossible"
            pass


if __name__ == "__main__" :
    
    """
    fin_de_recherche = recherche_medecin("Jules")
    print(fin_de_recherche)
    """
    
    """
    a = medecin_existe("mag_kine@alumni.enac.org")
    print(a)
    """
    
    """
    c = medecin_existe("ewen.dagorn@alumni.enac.fr")
    print(c)
    """
    
    """
    d = creer_medecin("alexandre", "dumas", "pediatre", "aldumas_pro@gmail.com", "0264879314", "9 boulevard Le Cleach", "22500", "LOGUIVY-DE-LA-MER")
    print(d)
    """
    
    """
    f = inscription_medecin("Antoine", "Rault", "homeopathe", "esnoyal@doc.chu-monthault.com", "0248792167", "7 avenue Airexpo", "35420", "MONTHAULT", "mdptropdur", "mdptropdur")
    print(f)
    """
    
    """
    e = supprimer_un_medecin_de_doctobelix("esnoyal@doc.chu-monthault.com")  
    print(e)
    """
    
    """
    d = modifier_medecin("Antoine", "Rault", "homeopathe", "esnoyal@doc.chu-monthault.com", "0248792167", "7 avenue Airexpo", "35420", "LOUVIGNE-DU-DESERT")
    print (d)
    """
    
    """
    connexion_medecin_reussie("esnoyal@doc.chu-monthault.com", "mdptropdur")
    """
    
    #toutes les fonctions semblent fonctionner correctement